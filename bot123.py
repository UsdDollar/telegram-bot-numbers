import sqlite3
from datetime import datetime, date
import os
from dotenv import load_dotenv
load_dotenv()

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("No BOT_TOKEN found in environment variables")

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
DB_PATH = os.getenv('DATABASE_PATH', 'database_info.db')
conn = sqlite3.connect(DB_PATH)
cursor = conn.cursor()

class UserInput(StatesGroup):
    waiting_for_dob = State()

def calculate_ruling_number(birth_date):
    birth_date = birth_date.replace('.', '/')
    numbers = ''.join(filter(str.isdigit, birth_date))
    num_sum = sum(int(num) for num in numbers)
    while num_sum not in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
        if num_sum in [10, 11, 22]:
            return num_sum
        num_sum = sum(int(num) for num in str(num_sum))
    return num_sum 

def count_digit_occurrences(birth_date):
    numbers = ''.join(filter(str.isdigit, birth_date))
    count_dict = {str(i): 0 for i in range(10)}
    for num in numbers:
        count_dict[num] += 1
    return count_dict

def determine_zodiac_sign(dob):
    zodiac_sign = ""
    if (dob.month == 3 and dob.day >= 21) or (dob.month == 4 and dob.day <= 20):
        zodiac_sign = "‚ôà–û–≤–µ–Ω"
    elif (dob.month == 4 and dob.day >= 21) or (dob.month == 5 and dob.day <= 21):
        zodiac_sign = "‚ôâ–¢–µ–ª–µ—Ü"
    elif (dob.month == 5 and dob.day >= 22) or (dob.month == 6 and dob.day <= 21):
        zodiac_sign = "‚ôä–ë–ª–∏–∑–Ω–µ—Ü—ã"
    elif (dob.month == 6 and dob.day >= 22) or (dob.month == 7 and dob.day <= 22):
        zodiac_sign = "‚ôã–†–∞–∫"
    elif (dob.month == 7 and dob.day >= 23) or (dob.month == 8 and dob.day <= 23):
        zodiac_sign = "‚ôå–õ–µ–≤"
    elif (dob.month == 8 and dob.day >= 24) or (dob.month == 9 and dob.day <= 23):
        zodiac_sign = "‚ôç–î–µ–≤–∞"
    elif (dob.month == 9 and dob.day >= 24) or (dob.month == 10 and dob.day <= 23):
        zodiac_sign = "‚ôé–í–µ—Å—ã"
    elif (dob.month == 10 and dob.day >= 24) or (dob.month == 11 and dob.day <= 22):
        zodiac_sign = "‚ôè–°–∫–æ—Ä–ø–∏–æ–Ω"
    elif (dob.month == 11 and dob.day >= 23) or (dob.month == 12 and dob.day <= 22):
        zodiac_sign = "‚ôê–°—Ç—Ä–µ–ª–µ—Ü"
    elif (dob.month == 12 and dob.day >= 23) or (dob.month == 1 and dob.day <= 20):
        zodiac_sign = "‚ôë–ö–æ–∑–µ—Ä–æ–≥"
    elif (dob.month == 1 and dob.day >= 21) or (dob.month == 2 and dob.day <= 19):
        zodiac_sign = "‚ôí–í–æ–¥–æ–ª–µ–π"
    elif (dob.month == 2 and dob.day >= 20) or (dob.month == 3 and dob.day <= 20):
        zodiac_sign = "‚ôì–†—ã–±—ã"
    return zodiac_sign

def determine_destiny_card(dob, cursor):
    month_day = dob.strftime('%d.%m')
    cursor.execute('SELECT card, description FROM aceqace WHERE card_day_month=?', (month_day,))
    data = cursor.fetchone()

    if data is None:
        return '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        card, description = data
        return card, description

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    chat_member = await bot.get_chat_member('@orqll', message.from_user.id)
    chat_admins = await bot.get_chat_administrators('@orqll')
    admin_ids = [admin.user.id for admin in chat_admins]
    if chat_member.status == 'member' or message.from_user.id in admin_ids or chat_member.status in ['creator', 'restricted']:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã —Å –Ω—É–∂–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥')
        await UserInput.waiting_for_dob.set()
    else:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text='üëâ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url='https://t.me/orqll'))
        keyboard.add(InlineKeyboardButton(text='‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data='subscribed'))
        await bot.send_message(message.chat.id, '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.', reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'subscribed')
async def subscribed_callback(callback_query: types.CallbackQuery):
    chat_member = await bot.get_chat_member('@orqll', callback_query.from_user.id)
    chat_admins = await bot.get_chat_administrators('@orqll')
    admin_ids = [admin.user.id for admin in chat_admins]
    if chat_member.status == 'member' or callback_query.from_user.id in admin_ids or chat_member.status in ['creator', 'restricted']:
        user_name = callback_query.from_user.first_name
        await bot.send_message(callback_query.message.chat.id, f'üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {user_name}! üéâ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ üéÇ\n\n–¥–¥.–º–º.–≥–≥–≥–≥ ', reply_markup=types.ReplyKeyboardRemove())
        await UserInput.waiting_for_dob.set()
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    else:
        await bot.answer_callback_query(callback_query.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.')

@dp.message_handler(state=UserInput.waiting_for_dob, content_types=types.ContentTypes.TEXT)
async def process_dob(message: types.Message, state: FSMContext):
    try:
        dob = datetime.strptime(message.text, '%d.%m.%Y').date()
    except ValueError:
        try:
            dob = datetime.strptime(message.text, '%d/%m/%Y').date()
        except ValueError:
            await bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥')
            return

    await state.update_data(dob=dob.strftime('%d.%m.%Y'))
    await send_dob_info_message(bot, message.chat.id, dob)

async def send_dob_info_message(bot, chat_id, dob):
    if dob is None:
        dob = date.today()
    dob_string = dob.strftime('%d.%m.%Y')
    ruling_number = str(calculate_ruling_number(dob_string))
    zodiac_sign = determine_zodiac_sign(dob)

    cursor.execute('SELECT * FROM ruling_numbers WHERE number=?', (ruling_number,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        dob_string = "<strong>" + dob_string + "</strong>"
        zodiac_sign_info = f"–ì–æ—Ä–æ—Å–∫–æ–ø –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ —Ä–∞—Å–∫—Ä–æ–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö, –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞—Ö –ª–∏—á–Ω–æ–π –∏ —Å–µ–º–µ–π–Ω–æ–π –∂–∏–∑–Ω–∏, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞—Ö –∏ —É—è–∑–≤–∏–º—ã—Ö –º–µ—Å—Ç–∞—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–∞.\n<b>‚Ä¢ –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:</b> {zodiac_sign}\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª‚¨áÔ∏è \n"
        smiley = ""
        if ruling_number == "2":
            smiley = "2Ô∏è‚É£"
        elif ruling_number == "3":
            smiley = "3Ô∏è‚É£"
        elif ruling_number == "4":
            smiley = "4Ô∏è‚É£"
        elif ruling_number == "5":
            smiley = "5Ô∏è‚É£"
        elif ruling_number == "6":
            smiley = "6Ô∏è‚É£"
        elif ruling_number == "7":
            smiley = "7Ô∏è‚É£"
        elif ruling_number == "8":
            smiley = "8Ô∏è‚É£"
        elif ruling_number == "9":
            smiley = "9Ô∏è‚É£"
        elif ruling_number == "10":
            smiley = "üîü"
        elif ruling_number == "11":
            smiley = "1Ô∏è‚É£1Ô∏è‚É£"
        elif ruling_number == "22":
            smiley = "2Ô∏è‚É£2Ô∏è‚É£"

        ruling_number_info = f"–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞–Ω–∏–µ –æ —Å–≤–æ–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –Ø –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—É—Ç—å –≤ –∂–∏–∑–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–∞–≤—è—â–µ–≥–æ —á–∏—Å–ª–∞.\n<b>‚Ä¢ –ü—Ä–∞–≤—è—â–µ–µ —á–∏—Å–ª–æ:</b> {smiley}\n"
        card, description = determine_destiny_card(dob, cursor)
        destiny_card = f"–°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä—Ç —Ä–∞—Å–∫—Ä–æ–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–Ω–µ—Ä–≥–∏—è—Ö –∏ –∫–∞—á–µ—Å—Ç–≤–∞—Ö, –∫–æ—Ç–æ—Ä—ã–º–∏ –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∞—Å –Ω–∞–¥–µ–ª—è–µ—Ç—Å—è –ø—Ä–∏ —Ä–æ–∂–¥–µ–Ω–∏–∏, –∏ –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞–º–∏ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –∂–∏–∑–Ω–∏ –¥–ª—è —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è.\n<b>‚Ä¢ –ö–∞—Ä—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {card} ({description})\n"
        response = '\n'.join(["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: " + dob_string, "", ruling_number_info, destiny_card, zodiac_sign_info])

    inline_keyboard = InlineKeyboardMarkup(row_width=1)
    button1 = InlineKeyboardButton(text=f'–ü—Ä–∞–≤—è—â–µ–µ —á–∏—Å–ª–æ {smiley}', callback_data=f'purpose_{ruling_number}')
    button2 = InlineKeyboardButton(text=f' –ó–Ω–∞–∫ {zodiac_sign}', callback_data=f'zodiac_')
    button3 = InlineKeyboardButton(text=f'–ö–∞—Ä—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è {card}', callback_data=f'card_description_{card}')
    inline_keyboard.add(button1, button3, button2)

    await bot.send_message(chat_id, response, parse_mode=ParseMode.HTML, reply_markup=inline_keyboard)

#‚ôà‚ôç‚ôê‚ôë
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('zodiac_'), state=UserInput.waiting_for_dob)
async def show_zodiac_description(callback_query: types.CallbackQuery, state: FSMContext):
    dob = datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date()
    day_month = dob.strftime('%d.%m')

    cursor.execute('SELECT * FROM zodiac_day WHERE day_number=?', (day_month,))
    result = cursor.fetchone()

    if result is not None:
        general_characteristics = result[1]

        description = f"<b>–†–æ–∂–¥–µ–Ω–Ω—ã–µ {day_month}</b>\n\n"
        description += f"{general_characteristics}\n\n"

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞", callback_data="zodiac_", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        button1 = InlineKeyboardButton(text="üíë –û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="love_horoscope_button")
        button2 = InlineKeyboardButton(text="üë® –ú—É–∂—á–∏–Ω–∞", callback_data="man_day")
        button3 = InlineKeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="girl_day")
        button4 = InlineKeyboardButton(text="üíº –ö–∞—Ä—å–µ—Ä–∞", callback_data="work_career_button")
        button5 = InlineKeyboardButton(text="üíä –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="health_disease_button")
        button7 = InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="tips_button")
        button8 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back")
        inline_keyboard.add(button2, button3, button1, button4, button5, button7, button8)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await bot.send_message(chat_id=callback_query.message.chat.id, text=description, reply_markup=inline_keyboard, parse_mode=ParseMode.HTML)

    else:
        await bot.send_message(callback_query.message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–Ω–∞–∫–µ –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'love_horoscope_button', state=UserInput.waiting_for_dob)
async def show_love_horoscope(callback_query: types.CallbackQuery, state: FSMContext):
    dob = datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date()
    day_month = dob.strftime('%d.%m')

    cursor.execute('SELECT love_horoscope FROM zodiac_day WHERE day_number=?', (day_month,))
    result = cursor.fetchone()

    if result is not None:
        love_horoscope = result[0]

        description = f"<b>–õ—é–±–æ–≤—å –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö {day_month}</b>\n\n"
        description += f"{love_horoscope}\n\n"

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="üå± –û—Å–Ω–æ–≤–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞", callback_data="zodiac_", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        button1 = InlineKeyboardButton(text="‚úÖ –û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="love_horoscope_button")
        button2 = InlineKeyboardButton(text="üë® –ú—É–∂—á–∏–Ω–∞", callback_data="man_day")
        button3 = InlineKeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="girl_day")
        button4 = InlineKeyboardButton(text="üíº –ö–∞—Ä—å–µ—Ä–∞", callback_data="work_career_button")
        button5 = InlineKeyboardButton(text="üíä –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="health_disease_button")
        button7 = InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="tips_button")
        button8 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back")
        inline_keyboard.add(button2, button3, button1, button4, button5, button7, button8)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await bot.send_message(chat_id=callback_query.message.chat.id, text=description, reply_markup=inline_keyboard, parse_mode=ParseMode.HTML)

    else:
        await bot.send_message(callback_query.message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–Ω–∞–∫–µ –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'man_day', state=UserInput.waiting_for_dob)
async def show_man_day(callback_query: types.CallbackQuery, state: FSMContext):
    dob = datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date()
    day_month = dob.strftime('%d.%m')

    cursor.execute('SELECT man_day FROM zodiac_day WHERE day_number=?', (day_month,))
    result = cursor.fetchone()

    if result is not None:
        particulars_horoscope = result[0]

        description = f"<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –º—É–∂—á–∏–Ω —Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö {day_month}</b>\n\n"
        description += f"{particulars_horoscope}\n\n"

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="üå± –û—Å–Ω–æ–≤–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞", callback_data="zodiac_", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        button1 = InlineKeyboardButton(text="üíë –û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="love_horoscope_button")
        button2 = InlineKeyboardButton(text="‚úÖ –ú—É–∂—á–∏–Ω–∞", callback_data="man_day")
        button3 = InlineKeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="girl_day")
        button4 = InlineKeyboardButton(text="üíº –ö–∞—Ä—å–µ—Ä–∞", callback_data="work_career_button")
        button5 = InlineKeyboardButton(text="üíä –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="health_disease_button")
        button7 = InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="tips_button")
        button8 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back")
        inline_keyboard.add(button2, button3, button1, button4, button5, button7, button8)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await bot.send_message(chat_id=callback_query.message.chat.id, text=description, reply_markup=inline_keyboard, parse_mode=ParseMode.HTML)

    else:
        await bot.send_message(callback_query.message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–Ω–∞–∫–µ –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'girl_day', state=UserInput.waiting_for_dob)
async def show_girl_day(callback_query: types.CallbackQuery, state: FSMContext):
    dob = datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date()
    day_month = dob.strftime('%d.%m')

    cursor.execute('SELECT girl_day FROM zodiac_day WHERE day_number=?', (day_month,))
    result = cursor.fetchone()

    if result is not None:
        particulars_horoscope = result[0]

        description = f"<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –∂–µ–Ω—â–∏–Ω —Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö {day_month}</b>\n\n"
        description += f"{particulars_horoscope}\n\n"

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="üå± –û—Å–Ω–æ–≤–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞", callback_data="zodiac_", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        button1 = InlineKeyboardButton(text="üíë –û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="love_horoscope_button")
        button2 = InlineKeyboardButton(text="üë® –ú—É–∂—á–∏–Ω–∞", callback_data="man_day")
        button3 = InlineKeyboardButton(text="‚úÖ –ñ–µ–Ω—â–∏–Ω–∞", callback_data="girl_day")
        button4 = InlineKeyboardButton(text="üíº –ö–∞—Ä—å–µ—Ä–∞", callback_data="work_career_button")
        button5 = InlineKeyboardButton(text="üíä –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="health_disease_button")
        button7 = InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="tips_button")
        button8 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back")
        inline_keyboard.add(button2, button3, button1, button4, button5, button7, button8)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await bot.send_message(chat_id=callback_query.message.chat.id, text=description, reply_markup=inline_keyboard, parse_mode=ParseMode.HTML)

    else:
        await bot.send_message(callback_query.message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–Ω–∞–∫–µ –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'work_career_button', state=UserInput.waiting_for_dob)
async def show_work_career(callback_query: types.CallbackQuery, state: FSMContext):
    dob = datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date()
    day_month = dob.strftime('%d.%m')

    cursor.execute('SELECT work_career FROM zodiac_day WHERE day_number=?', (day_month,))
    result = cursor.fetchone()

    if result is not None:
        particulars_horoscope = result[0]

        description = f"<b>–†–∞–±–æ—Ç–∞ –∏ –ö–∞—Ä—å–µ—Ä–∞ —Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö {day_month}</b>\n\n"
        description += f"{particulars_horoscope}\n\n"

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="üå± –û—Å–Ω–æ–≤–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞", callback_data="zodiac_", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        button1 = InlineKeyboardButton(text="üíë –û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="love_horoscope_button")
        button2 = InlineKeyboardButton(text="üë® –ú—É–∂—á–∏–Ω–∞", callback_data="man_day")
        button3 = InlineKeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="girl_day")
        button4 = InlineKeyboardButton(text="‚úÖ –ö–∞—Ä—å–µ—Ä–∞", callback_data="work_career_button")
        button5 = InlineKeyboardButton(text="üíä –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="health_disease_button")
        button7 = InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="tips_button")
        button8 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back")
        inline_keyboard.add(button2, button3, button1, button4, button5, button7, button8)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await bot.send_message(chat_id=callback_query.message.chat.id, text=description, reply_markup=inline_keyboard, parse_mode=ParseMode.HTML)

    else:
        await bot.send_message(callback_query.message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–Ω–∞–∫–µ –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'health_disease_button', state=UserInput.waiting_for_dob)
async def show_health_disease(callback_query: types.CallbackQuery, state: FSMContext):
    dob = datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date()
    day_month = dob.strftime('%d.%m')

    cursor.execute('SELECT health_disease FROM zodiac_day WHERE day_number=?', (day_month,))
    result = cursor.fetchone()

    if result is not None:
        particulars_horoscope = result[0]

        description = f"<b>–ó–¥–æ—Ä–æ–≤—å–µ —Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö {day_month}</b>\n\n"
        description += f"{particulars_horoscope}\n\n"

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="üå± –û—Å–Ω–æ–≤–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞", callback_data="zodiac_", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        button1 = InlineKeyboardButton(text="üíë –û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="love_horoscope_button")
        button2 = InlineKeyboardButton(text="üë® –ú—É–∂—á–∏–Ω–∞", callback_data="man_day")
        button3 = InlineKeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="girl_day")
        button4 = InlineKeyboardButton(text="üíº –ö–∞—Ä—å–µ—Ä–∞", callback_data="work_career_button")
        button5 = InlineKeyboardButton(text="‚úÖ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="health_disease_button")
        button7 = InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="tips_button")
        button8 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back")
        inline_keyboard.add(button2, button3, button1, button4, button5, button7, button8)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await bot.send_message(chat_id=callback_query.message.chat.id, text=description, reply_markup=inline_keyboard, parse_mode=ParseMode.HTML)

    else:
        await bot.send_message(callback_query.message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–Ω–∞–∫–µ –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'tips_button', state=UserInput.waiting_for_dob)
async def show_tips(callback_query: types.CallbackQuery, state: FSMContext):
    dob = datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date()
    day_month = dob.strftime('%d.%m')

    cursor.execute('SELECT tips FROM zodiac_day WHERE day_number=?', (day_month,))
    result = cursor.fetchone()

    if result is not None:
        particulars_horoscope = result[0]

        description = f"<b>–°–æ–≤–µ—Ç—ã —Ä–æ–∂–¥–µ–Ω–Ω—ã–º {day_month}</b>\n\n"
        description += f"{particulars_horoscope}\n\n"

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="üå± –û—Å–Ω–æ–≤–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞", callback_data="zodiac_", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        button1 = InlineKeyboardButton(text="üíë –û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="love_horoscope_button")
        button2 = InlineKeyboardButton(text="üë® –ú—É–∂—á–∏–Ω–∞", callback_data="man_day")
        button3 = InlineKeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="girl_day")
        button4 = InlineKeyboardButton(text="üíº –ö–∞—Ä—å–µ—Ä–∞", callback_data="work_career_button")
        button5 = InlineKeyboardButton(text="üíä –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="health_disease_button")
        button7 = InlineKeyboardButton(text="‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="tips_button")
        button8 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back")
        inline_keyboard.add(button2, button3, button1, button4, button5, button7, button8)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await bot.send_message(chat_id=callback_query.message.chat.id, text=description, reply_markup=inline_keyboard, parse_mode=ParseMode.HTML)

    else:
        await bot.send_message(callback_query.message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–Ω–∞–∫–µ –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

#–ö–ê–†–¢–´ –°–£–î–¨–ë–´ üëá
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('card_description'), state=UserInput.waiting_for_dob)
async def show_card_description(callback_query: types.CallbackQuery, state: FSMContext):
    dob = datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date()
    cursor.execute('SELECT * FROM aceqace WHERE card_day_month=?', (dob.strftime('%d.%m'),))
    result = cursor.fetchone()
    if result is not None:
        short_description = result[4]
        personality_description = result[5]
        card_description = f"<b>–ö–∞—Ä—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {result[1]} ({result[3]})\n\n"
        description = card_description + short_description + "\n\n" + personality_description

        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        button1 = InlineKeyboardButton(text="üë´ –û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="love_relationship")
        button2 = InlineKeyboardButton(text="üå† –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏", callback_data="planetary_control_maps")
        button3 = InlineKeyboardButton(text="üåÄ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", callback_data="karmic_maps")
        button4 = InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="planetary_sequence")
        button5 = InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–µ –∫–∞—Ä—Ç—ã", callback_data="personal_charts")
        button6 = InlineKeyboardButton(text="‚öô –û –º–µ—Ç–æ–¥–µ", callback_data="about_method")
        button7 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back")
        inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚úÖ –ö–∞—Ä—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="card_description")
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

        await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=description, reply_markup=inline_keyboard, parse_mode=ParseMode.HTML)
    else:
        await bot.send_message(callback_query.message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'love_relationship', state=UserInput.waiting_for_dob)
async def show_love_relationship(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT love_relationship FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        button1 = InlineKeyboardButton(text="‚úÖ –û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="love_relationship")
        button2 = InlineKeyboardButton(text="üå† –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏", callback_data="planetary_control_maps")
        button3 = InlineKeyboardButton(text="üåÄ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", callback_data="karmic_maps")
        button4 = InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="planetary_sequence")
        button5 = InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–µ –∫–∞—Ä—Ç—ã", callback_data="personal_charts")
        button7 = InlineKeyboardButton(text="‚öô –û –º–µ—Ç–æ–¥–µ", callback_data="about_method")
        button8 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back")
        inline_keyboard.add(button1, button2, button3, button4, button5, button7, button8)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="üÉè –ö–∞—Ä—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="card_description")
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'planetary_control_maps', state=UserInput.waiting_for_dob)
async def show_planetary_control_maps(callback_query: types.CallbackQuery, state: FSMContext):
    dob = datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date()
    cursor.execute('SELECT planetary_control_maps FROM aceqace WHERE card_day_month=?', (dob.strftime('%d.%m'),))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        button1 = InlineKeyboardButton(text="üë´ –û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="love_relationship")
        button2 = InlineKeyboardButton(text="‚úÖ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏", callback_data="planetary_control_maps")
        button3 = InlineKeyboardButton(text="üåÄ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", callback_data="karmic_maps")
        button4 = InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="planetary_sequence")
        button5 = InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–µ –∫–∞—Ä—Ç—ã", callback_data="personal_charts")
        button7 = InlineKeyboardButton(text="‚öô –û –º–µ—Ç–æ–¥–µ", callback_data="about_method")
        button8 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back")
        inline_keyboard.add(button1, button2, button3, button4, button5, button7, button8)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –∫–∞—Ä—Ç–∞—Ö –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="about_planetary", row_width=1)
        inline_keyboard_3.add(button_about_planets)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="üÉè –ö–∞—Ä—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="card_description")
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_3.inline_keyboard + inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'about_planetary', state=UserInput.waiting_for_dob)
async def show_about_planetary(callback_query: types.CallbackQuery, state: FSMContext):
    dob = datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date()
    cursor.execute('SELECT about_planetary FROM aceqace WHERE card_day_month=?', (dob.strftime('%d.%m'),))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        button1 = InlineKeyboardButton(text="üë´ –û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="love_relationship")
        button2 = InlineKeyboardButton(text="‚úÖ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏", callback_data="planetary_control_maps")
        button3 = InlineKeyboardButton(text="üåÄ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", callback_data="karmic_maps")
        button4 = InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="planetary_sequence")
        button5 = InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–µ –∫–∞—Ä—Ç—ã", callback_data="personal_charts")
        button6 = InlineKeyboardButton(text="üÉè –ö–∞—Ä—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="card_description")
        button7 = InlineKeyboardButton(text="‚öô –û –º–µ—Ç–æ–¥–µ", callback_data="about_method")
        button8 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back")
        inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7, button8)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚úÖ –û –∫–∞—Ä—Ç–∞—Ö –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="about_planetary", row_width=1)
        inline_keyboard_3.add(button_about_planets)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="üÉè –ö–∞—Ä—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="card_description")
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_3.inline_keyboard + inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'karmic_maps', state=UserInput.waiting_for_dob)
async def show_karmic_maps(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT karmic_maps FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = "–ö–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã\n\n" + data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        button1 = InlineKeyboardButton(text="üë´ –û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="love_relationship")
        button2 = InlineKeyboardButton(text="üå† –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏", callback_data="planetary_control_maps")
        button3 = InlineKeyboardButton(text="‚úÖ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", callback_data="karmic_maps")
        button4 = InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="planetary_sequence")
        button5 = InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–µ –∫–∞—Ä—Ç—ã", callback_data="personal_charts")
        button7 = InlineKeyboardButton(text="‚öô –û –º–µ—Ç–æ–¥–µ", callback_data="about_method")
        button8 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back")
        inline_keyboard.add(button1, button2, button3, button4, button5, button7, button8)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –∫–∞—Ä–º–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–∞—Ö", callback_data="about_karmic", row_width=1)
        inline_keyboard_3.add(button_about_planets)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="üÉè –ö–∞—Ä—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="card_description")
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_3.inline_keyboard + inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'about_karmic', state=UserInput.waiting_for_dob)
async def show_about_karmic(callback_query: types.CallbackQuery, state: FSMContext):
    dob = datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date()
    cursor.execute('SELECT about_karmic FROM aceqace WHERE card_day_month=?', (dob.strftime('%d.%m'),))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        button1 = InlineKeyboardButton(text="üë´ –û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="love_relationship")
        button2 = InlineKeyboardButton(text="üå† –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏", callback_data="planetary_control_maps")
        button3 = InlineKeyboardButton(text="‚úÖ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", callback_data="karmic_maps")
        button4 = InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="planetary_sequence")
        button5 = InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–µ –∫–∞—Ä—Ç—ã", callback_data="personal_charts")
        button6 = InlineKeyboardButton(text="üÉè –ö–∞—Ä—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="card_description")
        button7 = InlineKeyboardButton(text="‚öô –û –º–µ—Ç–æ–¥–µ", callback_data="about_method")
        button8 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back")
        inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7, button8)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚úÖ –û –∫–∞—Ä–º–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–∞—Ö", callback_data="about_karmic", row_width=1)
        inline_keyboard_3.add(button_about_planets)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="üÉè –ö–∞—Ä—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="card_description")
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_3.inline_keyboard + inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'planetary_sequence', state=UserInput.waiting_for_dob)
async def show_planetary_sequence(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT planetary_sequence FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=3)
        button1 = InlineKeyboardButton(text="–ú–µ—Ä–∫—É—Ä–∏–π", callback_data="map_mercury")
        button2 = InlineKeyboardButton(text="–í–µ–Ω–µ—Ä–∞", callback_data="map_veners")
        button3 = InlineKeyboardButton(text="–ú–∞—Ä—Å", callback_data="map_marce")
        button4 = InlineKeyboardButton(text="–Æ–ø–∏—Ç–µ—Ä", callback_data="map_jupiter")
        button5 = InlineKeyboardButton(text="–°–∞—Ç—É—Ä–Ω", callback_data="map_saturn")
        button6 = InlineKeyboardButton(text="–£—Ä–∞–Ω", callback_data="map_uranium")
        button7 = InlineKeyboardButton(text="–ù–µ–ø—Ç—É–Ω", callback_data="map_neptune")
        button8 = InlineKeyboardButton(text="–ü–ª—É—Ç–æ–Ω", callback_data="map_life_objective")
        button9 = InlineKeyboardButton(text="–†–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="map_result")
        button10 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –ø–ª–∞–Ω–µ—Ç–∞—Ö", callback_data="about_planets", row_width=1)
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'personal_charts', state=UserInput.waiting_for_dob)
async def show_personal_charts(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT personal_charts FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=3)
        button1 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="personal_jacks")
        button2 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="personal_lady")
        button3 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="personal_kings")
        button4 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚úÖ –û –ª–∏—á–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö", callback_data="personal_charts", row_width=1)
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'personal_jacks', state=UserInput.waiting_for_dob)
async def show_personal_jacks(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT personal_jacks FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=3)
        button1 = InlineKeyboardButton(text="‚úÖ –í–∞–ª–µ—Ç—ã", callback_data="personal_jacks")
        button2 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="personal_lady")
        button3 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="personal_kings")
        button4 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –ª–∏—á–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö", callback_data="personal_charts", row_width=1)
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'personal_lady', state=UserInput.waiting_for_dob)
async def show_personal_lady(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT personal_lady FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=3)
        button1 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="personal_jacks")
        button2 = InlineKeyboardButton(text="‚úÖ –î–∞–º—ã", callback_data="personal_lady")
        button3 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="personal_kings")
        button4 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –ª–∏—á–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö", callback_data="personal_charts", row_width=1)
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'personal_kings', state=UserInput.waiting_for_dob)
async def show_personal_kings(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT personal_kings FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=3)
        button1 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="personal_jacks")
        button2 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="personal_lady")
        button3 = InlineKeyboardButton(text="‚úÖ –ö–æ—Ä–æ–ª–∏", callback_data="personal_kings")
        button4 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –ª–∏—á–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö", callback_data="personal_charts", row_width=1)
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'about_method', state=UserInput.waiting_for_dob)
async def show_about_method(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT about_method FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚úÖ –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'spades', state=UserInput.waiting_for_dob)
async def show_spades(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT spades FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚úÖ –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'hearts', state=UserInput.waiting_for_dob)
async def show_hearts(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT hearts FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚úÖ –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'treffs', state=UserInput.waiting_for_dob)
async def show_treffs(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT treffs FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚úÖ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'tambourines', state=UserInput.waiting_for_dob)
async def show_tambourines(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT tambourines FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚úÖ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'jacks_1', state=UserInput.waiting_for_dob)
async def show_jacks_1(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT jacks_1 FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="‚úÖ –í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'ladies_1', state=UserInput.waiting_for_dob)
async def show_ladies_1(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT ladies_1 FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="‚úÖ –î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'kings_1', state=UserInput.waiting_for_dob)
async def show_kings_1(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT kings_1 FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="‚úÖ –ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'aces', state=UserInput.waiting_for_dob)
async def show_aces(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT aces FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="‚úÖ –¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'twos', state=UserInput.waiting_for_dob)
async def show_twos(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT twos FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="‚úÖ –î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'triplets', state=UserInput.waiting_for_dob)
async def show_triplets(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT triplets FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="‚úÖ –¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'fours', state=UserInput.waiting_for_dob)
async def show_fours(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT fours FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="‚úÖ –ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'fives', state=UserInput.waiting_for_dob)
async def show_fives(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT fives FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="‚úÖ –ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'sixes', state=UserInput.waiting_for_dob)
async def show_sixes(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT sixes FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="‚úÖ –®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'sevens', state=UserInput.waiting_for_dob)
async def show_sevens(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT sevens FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="‚úÖ –°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'eights', state=UserInput.waiting_for_dob)
async def show_eights(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT eights FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="‚úÖ –í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'nines', state=UserInput.waiting_for_dob)
async def show_nines(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT nines FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="‚úÖ –î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'dozens', state=UserInput.waiting_for_dob)
async def show_dozens(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT dozens FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=4)
        button1 = InlineKeyboardButton(text="‚ô† –ü–∏–∫–∏", callback_data="spades")
        button2 = InlineKeyboardButton(text="‚ô• –ß–µ—Ä–≤—ã", callback_data="hearts")
        button3 = InlineKeyboardButton(text="‚ô£ –¢—Ä–µ—Ñ—ã", callback_data="treffs")
        button4 = InlineKeyboardButton(text="‚ô¶ –ë—É–±–Ω—ã", callback_data="tambourines")
        inline_keyboard.add(button1, button2, button3, button4)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –º–µ—Ç–æ–¥–µ", callback_data="about_method", row_width=1)
        inline_keyboard_2.add(button_about_planets)

        inline_keyboard_3 = InlineKeyboardMarkup(row_width=3)
        button6 = InlineKeyboardButton(text="–í–∞–ª–µ—Ç—ã", callback_data="jacks_1")
        button7 = InlineKeyboardButton(text="–î–∞–º—ã", callback_data="ladies_1")
        button8 = InlineKeyboardButton(text="–ö–æ—Ä–æ–ª–∏", callback_data="kings_1")
        inline_keyboard_3.add(button6, button7, button8)

        inline_keyboard_4 = InlineKeyboardMarkup(row_width=5)
        button9 = InlineKeyboardButton(text="–¢—É–∑—ã", callback_data="aces")
        button10 = InlineKeyboardButton(text="–î–≤–æ–π–∫–∏", callback_data="twos")
        button11 = InlineKeyboardButton(text="–¢—Ä–æ–π–∫–∏", callback_data="triplets")
        button12 = InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–∫–∏", callback_data="fours")
        button13 = InlineKeyboardButton(text="–ü—è—Ç–µ—Ä–∫–∏", callback_data="fives")
        button14 = InlineKeyboardButton(text="–®–µ—Å—Ç–µ—Ä–∫–∏", callback_data="sixes")
        button15 = InlineKeyboardButton(text="–°–µ–º–µ—Ä–∫–∏", callback_data="sevens")
        button16 = InlineKeyboardButton(text="–í–æ—Å—å–º–µ—Ä–∫–∏", callback_data="eights")
        button17 = InlineKeyboardButton(text="–î–µ–≤—è—Ç–∫–∏", callback_data="nines")
        button18 = InlineKeyboardButton(text="‚úÖ –î–µ—Å—è—Ç–∫–∏", callback_data="dozens")
        inline_keyboard_4.add(button9, button10, button11, button12, button13, button14, button15, button16, button17, button18)

        inline_keyboard_5 = InlineKeyboardMarkup(row_width=1)
        button_5 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard_5.add(button_5)

        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard + inline_keyboard_3.inline_keyboard + inline_keyboard_4.inline_keyboard + inline_keyboard_5.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

#–ü–ª–∞–Ω–µ—Ç–∞—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'about_planets', state=UserInput.waiting_for_dob)
async def show_about_planets(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT about_planets FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=3)
        button1 = InlineKeyboardButton(text="–ú–µ—Ä–∫—É—Ä–∏–π", callback_data="map_mercury")
        button2 = InlineKeyboardButton(text="–í–µ–Ω–µ—Ä–∞", callback_data="map_veners")
        button3 = InlineKeyboardButton(text="–ú–∞—Ä—Å", callback_data="map_marce")
        button4 = InlineKeyboardButton(text="–Æ–ø–∏—Ç–µ—Ä", callback_data="map_jupiter")
        button5 = InlineKeyboardButton(text="–°–∞—Ç—É—Ä–Ω", callback_data="map_saturn")
        button6 = InlineKeyboardButton(text="–£—Ä–∞–Ω", callback_data="map_uranium")
        button7 = InlineKeyboardButton(text="–ù–µ–ø—Ç—É–Ω", callback_data="map_neptune")
        button8 = InlineKeyboardButton(text="–ü–ª—É—Ç–æ–Ω", callback_data="map_life_objective")
        button9 = InlineKeyboardButton(text="–†–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="map_result")
        button10 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚úÖ –û –ø–ª–∞–Ω–µ—Ç–∞—Ö", callback_data="about_planets", row_width=1)
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'map_mercury', state=UserInput.waiting_for_dob)
async def show_map_mercury(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT map_mercury FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=3)
        button1 = InlineKeyboardButton(text="‚úÖ –ú–µ—Ä–∫—É—Ä–∏–π", callback_data="map_mercury")
        button2 = InlineKeyboardButton(text="–í–µ–Ω–µ—Ä–∞", callback_data="map_veners")
        button3 = InlineKeyboardButton(text="–ú–∞—Ä—Å", callback_data="map_marce")
        button4 = InlineKeyboardButton(text="–Æ–ø–∏—Ç–µ—Ä", callback_data="map_jupiter")
        button5 = InlineKeyboardButton(text="–°–∞—Ç—É—Ä–Ω", callback_data="map_saturn")
        button6 = InlineKeyboardButton(text="–£—Ä–∞–Ω", callback_data="map_uranium")
        button7 = InlineKeyboardButton(text="–ù–µ–ø—Ç—É–Ω", callback_data="map_neptune")
        button8 = InlineKeyboardButton(text="–ü–ª—É—Ç–æ–Ω", callback_data="map_life_objective")
        button9 = InlineKeyboardButton(text="–†–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="map_result")
        button10 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –ø–ª–∞–Ω–µ—Ç–∞—Ö", callback_data="about_planets", row_width=1)
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'map_veners', state=UserInput.waiting_for_dob)
async def show_map_veners(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT map_veners FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=3)
        button1 = InlineKeyboardButton(text="–ú–µ—Ä–∫—É—Ä–∏–π", callback_data="map_mercury")
        button2 = InlineKeyboardButton(text="‚úÖ –í–µ–Ω–µ—Ä–∞", callback_data="map_veners")
        button3 = InlineKeyboardButton(text="–ú–∞—Ä—Å", callback_data="map_marce")
        button4 = InlineKeyboardButton(text="–Æ–ø–∏—Ç–µ—Ä", callback_data="map_jupiter")
        button5 = InlineKeyboardButton(text="–°–∞—Ç—É—Ä–Ω", callback_data="map_saturn")
        button6 = InlineKeyboardButton(text="–£—Ä–∞–Ω", callback_data="map_uranium")
        button7 = InlineKeyboardButton(text="–ù–µ–ø—Ç—É–Ω", callback_data="map_neptune")
        button8 = InlineKeyboardButton(text="–ü–ª—É—Ç–æ–Ω", callback_data="map_life_objective")
        button9 = InlineKeyboardButton(text="–†–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="map_result")
        button10 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –ø–ª–∞–Ω–µ—Ç–∞—Ö", callback_data="about_planets", row_width=1)
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'map_marce', state=UserInput.waiting_for_dob)
async def show_map_marce(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT map_marce FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=3)
        button1 = InlineKeyboardButton(text="–ú–µ—Ä–∫—É—Ä–∏–π", callback_data="map_mercury")
        button2 = InlineKeyboardButton(text="–í–µ–Ω–µ—Ä–∞", callback_data="map_veners")
        button3 = InlineKeyboardButton(text="‚úÖ –ú–∞—Ä—Å", callback_data="map_marce")
        button4 = InlineKeyboardButton(text="–Æ–ø–∏—Ç–µ—Ä", callback_data="map_jupiter")
        button5 = InlineKeyboardButton(text="–°–∞—Ç—É—Ä–Ω", callback_data="map_saturn")
        button6 = InlineKeyboardButton(text="–£—Ä–∞–Ω", callback_data="map_uranium")
        button7 = InlineKeyboardButton(text="–ù–µ–ø—Ç—É–Ω", callback_data="map_neptune")
        button8 = InlineKeyboardButton(text="–ü–ª—É—Ç–æ–Ω", callback_data="map_life_objective")
        button9 = InlineKeyboardButton(text="–†–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="map_result")
        button10 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –ø–ª–∞–Ω–µ—Ç–∞—Ö", callback_data="about_planets", row_width=1)
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'map_jupiter', state=UserInput.waiting_for_dob)
async def show_map_jupiter(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT map_jupiter FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=3)
        button1 = InlineKeyboardButton(text="–ú–µ—Ä–∫—É—Ä–∏–π", callback_data="map_mercury")
        button2 = InlineKeyboardButton(text="–í–µ–Ω–µ—Ä–∞", callback_data="map_veners")
        button3 = InlineKeyboardButton(text="–ú–∞—Ä—Å", callback_data="map_marce")
        button4 = InlineKeyboardButton(text="‚úÖ –Æ–ø–∏—Ç–µ—Ä", callback_data="map_jupiter")
        button5 = InlineKeyboardButton(text="–°–∞—Ç—É—Ä–Ω", callback_data="map_saturn")
        button6 = InlineKeyboardButton(text="–£—Ä–∞–Ω", callback_data="map_uranium")
        button7 = InlineKeyboardButton(text="–ù–µ–ø—Ç—É–Ω", callback_data="map_neptune")
        button8 = InlineKeyboardButton(text="–ü–ª—É—Ç–æ–Ω", callback_data="map_life_objective")
        button9 = InlineKeyboardButton(text="–†–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="map_result")
        button10 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –ø–ª–∞–Ω–µ—Ç–∞—Ö", callback_data="about_planets", row_width=1)
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'map_saturn', state=UserInput.waiting_for_dob)
async def show_map_saturn(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT map_saturn FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=3)
        button1 = InlineKeyboardButton(text="–ú–µ—Ä–∫—É—Ä–∏–π", callback_data="map_mercury")
        button2 = InlineKeyboardButton(text="–í–µ–Ω–µ—Ä–∞", callback_data="map_veners")
        button3 = InlineKeyboardButton(text="–ú–∞—Ä—Å", callback_data="map_marce")
        button4 = InlineKeyboardButton(text="–Æ–ø–∏—Ç–µ—Ä", callback_data="map_jupiter")
        button5 = InlineKeyboardButton(text="‚úÖ –°–∞—Ç—É—Ä–Ω", callback_data="map_saturn")
        button6 = InlineKeyboardButton(text="–£—Ä–∞–Ω", callback_data="map_uranium")
        button7 = InlineKeyboardButton(text="–ù–µ–ø—Ç—É–Ω", callback_data="map_neptune")
        button8 = InlineKeyboardButton(text="–ü–ª—É—Ç–æ–Ω", callback_data="map_life_objective")
        button9 = InlineKeyboardButton(text="–†–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="map_result")
        button10 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –ø–ª–∞–Ω–µ—Ç–∞—Ö", callback_data="about_planets", row_width=1)
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'map_uranium', state=UserInput.waiting_for_dob)
async def show_map_uranium(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT map_uranium FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=3)
        button1 = InlineKeyboardButton(text="–ú–µ—Ä–∫—É—Ä–∏–π", callback_data="map_mercury")
        button2 = InlineKeyboardButton(text="–í–µ–Ω–µ—Ä–∞", callback_data="map_veners")
        button3 = InlineKeyboardButton(text="–ú–∞—Ä—Å", callback_data="map_marce")
        button4 = InlineKeyboardButton(text="–Æ–ø–∏—Ç–µ—Ä", callback_data="map_jupiter")
        button5 = InlineKeyboardButton(text="–°–∞—Ç—É—Ä–Ω", callback_data="map_saturn")
        button6 = InlineKeyboardButton(text="‚úÖ –£—Ä–∞–Ω", callback_data="map_uranium")
        button7 = InlineKeyboardButton(text="–ù–µ–ø—Ç—É–Ω", callback_data="map_neptune")
        button8 = InlineKeyboardButton(text="–ü–ª—É—Ç–æ–Ω", callback_data="map_life_objective")
        button9 = InlineKeyboardButton(text="–†–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="map_result")
        button10 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –ø–ª–∞–Ω–µ—Ç–∞—Ö", callback_data="about_planets", row_width=1)
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'map_neptune', state=UserInput.waiting_for_dob)
async def show_map_neptune(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT map_neptune FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=3)
        button1 = InlineKeyboardButton(text="–ú–µ—Ä–∫—É—Ä–∏–π", callback_data="map_mercury")
        button2 = InlineKeyboardButton(text="–í–µ–Ω–µ—Ä–∞", callback_data="map_veners")
        button3 = InlineKeyboardButton(text="–ú–∞—Ä—Å", callback_data="map_marce")
        button4 = InlineKeyboardButton(text="–Æ–ø–∏—Ç–µ—Ä", callback_data="map_jupiter")
        button5 = InlineKeyboardButton(text="–°–∞—Ç—É—Ä–Ω", callback_data="map_saturn")
        button6 = InlineKeyboardButton(text="–£—Ä–∞–Ω", callback_data="map_uranium")
        button7 = InlineKeyboardButton(text="‚úÖ –ù–µ–ø—Ç—É–Ω", callback_data="map_neptune")
        button8 = InlineKeyboardButton(text="–ü–ª—É—Ç–æ–Ω", callback_data="map_life_objective")
        button9 = InlineKeyboardButton(text="–†–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="map_result")
        button10 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –ø–ª–∞–Ω–µ—Ç–∞—Ö", callback_data="about_planets", row_width=1)
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'map_life_objective', state=UserInput.waiting_for_dob)
async def show_map_life_objective(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT map_life_objective FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=3)
        button1 = InlineKeyboardButton(text="–ú–µ—Ä–∫—É—Ä–∏–π", callback_data="map_mercury")
        button2 = InlineKeyboardButton(text="–í–µ–Ω–µ—Ä–∞", callback_data="map_veners")
        button3 = InlineKeyboardButton(text="–ú–∞—Ä—Å", callback_data="map_marce")
        button4 = InlineKeyboardButton(text="–Æ–ø–∏—Ç–µ—Ä", callback_data="map_jupiter")
        button5 = InlineKeyboardButton(text="–°–∞—Ç—É—Ä–Ω", callback_data="map_saturn")
        button6 = InlineKeyboardButton(text="–£—Ä–∞–Ω", callback_data="map_uranium")
        button7 = InlineKeyboardButton(text="–ù–µ–ø—Ç—É–Ω", callback_data="map_neptune")
        button8 = InlineKeyboardButton(text="‚úÖ –ü–ª—É—Ç–æ–Ω", callback_data="map_life_objective")
        button9 = InlineKeyboardButton(text="–†–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="map_result")
        button10 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –ø–ª–∞–Ω–µ—Ç–∞—Ö", callback_data="about_planets", row_width=1)
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'map_result', state=UserInput.waiting_for_dob)
async def show_map_result(callback_query: types.CallbackQuery, state: FSMContext):
    card = determine_destiny_card(datetime.strptime((await state.get_data())['dob'], '%d.%m.%Y').date(), cursor)[0]
    cursor.execute('SELECT map_result FROM aceqace WHERE card=?', (card,))
    data = cursor.fetchone()

    if data is None:
        response = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    else:
        response = data[0]

        inline_keyboard = InlineKeyboardMarkup(row_width=3)
        button1 = InlineKeyboardButton(text="–ú–µ—Ä–∫—É—Ä–∏–π", callback_data="map_mercury")
        button2 = InlineKeyboardButton(text="–í–µ–Ω–µ—Ä–∞", callback_data="map_veners")
        button3 = InlineKeyboardButton(text="–ú–∞—Ä—Å", callback_data="map_marce")
        button4 = InlineKeyboardButton(text="–Æ–ø–∏—Ç–µ—Ä", callback_data="map_jupiter")
        button5 = InlineKeyboardButton(text="–°–∞—Ç—É—Ä–Ω", callback_data="map_saturn")
        button6 = InlineKeyboardButton(text="–£—Ä–∞–Ω", callback_data="map_uranium")
        button7 = InlineKeyboardButton(text="–ù–µ–ø—Ç—É–Ω", callback_data="map_neptune")
        button8 = InlineKeyboardButton(text="–ü–ª—É—Ç–æ–Ω", callback_data="map_life_objective")
        button9 = InlineKeyboardButton(text="‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="map_result")
        button10 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="card_description")
        inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10)

        inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
        button_about_planets = InlineKeyboardButton(text="‚ùì –û –ø–ª–∞–Ω–µ—Ç–∞—Ö", callback_data="about_planets", row_width=1)
        inline_keyboard_2.add(button_about_planets)
        inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, response, reply_markup=inline_keyboard)

# –ñ–ò–ó–ù–ï–ù–ù–´–ô –ü–£–¢–¨ üí´
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('purpose'), state=UserInput.waiting_for_dob)
async def cmd_purpose(callback_query: types.CallbackQuery, state: FSMContext):
    ruling_number = callback_query.data.split('_')[1]
    user_data = await state.get_data()
    dob_string = user_data['dob']

    cursor.execute("SELECT meaning FROM ruling_numbers WHERE number = ?", (ruling_number,))
    result = cursor.fetchone()
    meaning = result[0] if result else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    inline_keyboard = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='üéØ –¶–µ–ª—å –∂–∏–∑–Ω–∏', callback_data=f'life_purpose_{ruling_number}')
    button2 = InlineKeyboardButton(text='üåü –°–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è', callback_data=f'self_actualization_{ruling_number}')
    button3 = InlineKeyboardButton(text='üé® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏', callback_data=f'characteristics_{ruling_number}')
    button4 = InlineKeyboardButton(text='üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏', callback_data=f'negative_trends_{ruling_number}')
    button5 = InlineKeyboardButton(text='üîù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data=f'recommended_destinations_{ruling_number}')
    button6 = InlineKeyboardButton(text='üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', callback_data=f'suitable_occupations_{ruling_number}')
    button7 = InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back')
    inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7)

    inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
    button_about_planets = InlineKeyboardButton(text="‚úÖ –ü—Ä–∞–≤—è—â–µ–µ —á–∏—Å–ª–æ", callback_data=f'purpose_{ruling_number}')
    inline_keyboard_2.add(button_about_planets)

    inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    response = f'üî¢ –í–∞—à–µ –ø—Ä–∞–≤—è—â–µ–µ —á–∏—Å–ª–æ: {ruling_number} üî¢\n\n{meaning}'
    await bot.send_message(callback_query.message.chat.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('life_purpose'), state=UserInput.waiting_for_dob)
async def cmd_life_purpose(callback_query: types.CallbackQuery, state: FSMContext):
    ruling_number = callback_query.data.split('_')[2]

    cursor.execute("SELECT life_purpose FROM ruling_numbers WHERE number = ?", (ruling_number,))
    result = cursor.fetchone()
    life_purpose = result[0] if result else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    inline_keyboard = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='‚úÖ –¶–µ–ª—å –∂–∏–∑–Ω–∏', callback_data=f'life_purpose_{ruling_number}')
    button2 = InlineKeyboardButton(text='üåü –°–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è', callback_data=f'self_actualization_{ruling_number}')
    button3 = InlineKeyboardButton(text='üé® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏', callback_data=f'characteristics_{ruling_number}')
    button4 = InlineKeyboardButton(text='üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏', callback_data=f'negative_trends_{ruling_number}')
    button5 = InlineKeyboardButton(text='üîù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data=f'recommended_destinations_{ruling_number}')
    button6 = InlineKeyboardButton(text='üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', callback_data=f'suitable_occupations_{ruling_number}')
    button7 = InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back')
    inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7)

    inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
    button_about_planets = InlineKeyboardButton(text="üî¢ –ü—Ä–∞–≤—è—â–µ–µ —á–∏—Å–ª–æ", callback_data=f'purpose_{ruling_number}')
    inline_keyboard_2.add(button_about_planets)
    inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    response = f'üéØ –¶–µ–ª—å –∂–∏–∑–Ω–∏ –¥–ª—è —á–∏—Å–ª–∞ {ruling_number}:\n\n{life_purpose}'
    await bot.send_message(callback_query.message.chat.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('self_actualization'), state=UserInput.waiting_for_dob)
async def cmd_self_actualization(callback_query: types.CallbackQuery, state: FSMContext):
    ruling_number = callback_query.data.split('_')[2]

    cursor.execute("SELECT self_actualization FROM ruling_numbers WHERE number = ?", (ruling_number,))
    result = cursor.fetchone()
    self_actualization = result[0] if result else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    inline_keyboard = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='üéØ –¶–µ–ª—å –∂–∏–∑–Ω–∏', callback_data=f'life_purpose_{ruling_number}')
    button2 = InlineKeyboardButton(text='‚úÖ –°–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è', callback_data=f'self_actualization_{ruling_number}')
    button3 = InlineKeyboardButton(text='üé® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏', callback_data=f'characteristics_{ruling_number}')
    button4 = InlineKeyboardButton(text='üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏', callback_data=f'negative_trends_{ruling_number}')
    button5 = InlineKeyboardButton(text='üîù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data=f'recommended_destinations_{ruling_number}')
    button6 = InlineKeyboardButton(text='üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', callback_data=f'suitable_occupations_{ruling_number}')
    button7 = InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back')
    inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7)

    inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
    button_about_planets = InlineKeyboardButton(text="üî¢ –ü—Ä–∞–≤—è—â–µ–µ —á–∏—Å–ª–æ", callback_data=f'purpose_{ruling_number}')
    inline_keyboard_2.add(button_about_planets)
    inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    response = f'üåü –°–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —á–∏—Å–ª–∞ {ruling_number}:\n\n{self_actualization}'
    await bot.send_message(callback_query.message.chat.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('characteristics'), state=UserInput.waiting_for_dob)
async def cmd_characteristics(callback_query: types.CallbackQuery, state: FSMContext):
    ruling_number = callback_query.data.split('_')[1]
    
    cursor.execute("SELECT characteristics FROM ruling_numbers WHERE number = ?", (ruling_number,))
    result = cursor.fetchone()
    characteristics = result[0] if result else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    inline_keyboard = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='üéØ –¶–µ–ª—å –∂–∏–∑–Ω–∏', callback_data=f'life_purpose_{ruling_number}')
    button2 = InlineKeyboardButton(text='üåü –°–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è', callback_data=f'self_actualization_{ruling_number}')
    button3 = InlineKeyboardButton(text='‚úÖ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏', callback_data=f'characteristics_{ruling_number}')
    button4 = InlineKeyboardButton(text='üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏', callback_data=f'negative_trends_{ruling_number}')
    button5 = InlineKeyboardButton(text='üîù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data=f'recommended_destinations_{ruling_number}')
    button6 = InlineKeyboardButton(text='üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', callback_data=f'suitable_occupations_{ruling_number}')
    button7 = InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back')
    inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7)

    inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
    button_about_planets = InlineKeyboardButton(text="üî¢ –ü—Ä–∞–≤—è—â–µ–µ —á–∏—Å–ª–æ", callback_data=f'purpose_{ruling_number}')
    inline_keyboard_2.add(button_about_planets)
    inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    
    response = f'üé® –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —á–µ—Ä—Ç—ã –¥–ª—è —á–∏—Å–ª–∞ {ruling_number}:\n\n{characteristics}'
    await bot.send_message(callback_query.message.chat.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('negative_trends'), state=UserInput.waiting_for_dob)
async def cmd_negative_trends(callback_query: types.CallbackQuery, state: FSMContext):
    ruling_number = callback_query.data.split('_')[2]

    cursor.execute("SELECT negative_trends FROM ruling_numbers WHERE number = ?", (ruling_number,))
    result = cursor.fetchone()
    negative_trends = result[0] if result else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    inline_keyboard = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='üéØ –¶–µ–ª—å –∂–∏–∑–Ω–∏', callback_data=f'life_purpose_{ruling_number}')
    button2 = InlineKeyboardButton(text='üåü –°–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è', callback_data=f'self_actualization_{ruling_number}')
    button3 = InlineKeyboardButton(text='üé® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏', callback_data=f'characteristics_{ruling_number}')
    button4 = InlineKeyboardButton(text='‚úÖ –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏', callback_data=f'negative_trends_{ruling_number}')
    button5 = InlineKeyboardButton(text='üîù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data=f'recommended_destinations_{ruling_number}')
    button6 = InlineKeyboardButton(text='üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', callback_data=f'suitable_occupations_{ruling_number}')
    button7 = InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back')
    inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7)

    inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
    button_about_planets = InlineKeyboardButton(text="üî¢ –ü—Ä–∞–≤—è—â–µ–µ —á–∏—Å–ª–æ", callback_data=f'purpose_{ruling_number}')
    inline_keyboard_2.add(button_about_planets)
    inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    response = f'üö´ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –¥–ª—è —á–∏—Å–ª–∞ {ruling_number}:\n\n{negative_trends}'
    await bot.send_message(callback_query.message.chat.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('recommended_destinations'), state=UserInput.waiting_for_dob)
async def cmd_recommended_destinations(callback_query: types.CallbackQuery, state: FSMContext):
    ruling_number = callback_query.data.split('_')[2]

    cursor.execute("SELECT recommended_destinations FROM ruling_numbers WHERE number = ?", (ruling_number,))
    result = cursor.fetchone()
    recommended_destinations = result[0] if result else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    inline_keyboard = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='üéØ –¶–µ–ª—å –∂–∏–∑–Ω–∏', callback_data=f'life_purpose_{ruling_number}')
    button2 = InlineKeyboardButton(text='üåü –°–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è', callback_data=f'self_actualization_{ruling_number}')
    button3 = InlineKeyboardButton(text='üé® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏', callback_data=f'characteristics_{ruling_number}')
    button4 = InlineKeyboardButton(text='üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏', callback_data=f'negative_trends_{ruling_number}')
    button5 = InlineKeyboardButton(text='‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data=f'recommended_destinations_{ruling_number}')
    button6 = InlineKeyboardButton(text='üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', callback_data=f'suitable_occupations_{ruling_number}')
    button7 = InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back')
    inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7)

    inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
    button_about_planets = InlineKeyboardButton(text="üî¢ –ü—Ä–∞–≤—è—â–µ–µ —á–∏—Å–ª–æ", callback_data=f'purpose_{ruling_number}')
    inline_keyboard_2.add(button_about_planets)
    inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    response = f'üîù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —á–∏—Å–ª–∞ {ruling_number}:\n\n{recommended_destinations}'
    await bot.send_message(callback_query.message.chat.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('suitable_occupations'), state=UserInput.waiting_for_dob)
async def cmd_suitable_occupations(callback_query: types.CallbackQuery, state: FSMContext):
    ruling_number = callback_query.data.split('_')[2]

    cursor.execute("SELECT suitable_occupations FROM ruling_numbers WHERE number = ?", (ruling_number,))
    result = cursor.fetchone()
    suitable_occupations = result[0] if result else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    inline_keyboard = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='üéØ –¶–µ–ª—å –∂–∏–∑–Ω–∏', callback_data=f'life_purpose_{ruling_number}')
    button2 = InlineKeyboardButton(text='üåü –°–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è', callback_data=f'self_actualization_{ruling_number}')
    button3 = InlineKeyboardButton(text='üé® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏', callback_data=f'characteristics_{ruling_number}')
    button4 = InlineKeyboardButton(text='üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏', callback_data=f'negative_trends_{ruling_number}')
    button5 = InlineKeyboardButton(text='üîù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data=f'recommended_destinations_{ruling_number}')
    button6 = InlineKeyboardButton(text='‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', callback_data=f'suitable_occupations_{ruling_number}')
    button7 = InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back')
    inline_keyboard.add(button1, button2, button3, button4, button5, button6, button7)

    inline_keyboard_2 = InlineKeyboardMarkup(row_width=1)
    button_about_planets = InlineKeyboardButton(text="üî¢ –ü—Ä–∞–≤—è—â–µ–µ —á–∏—Å–ª–æ", callback_data=f'purpose_{ruling_number}')
    inline_keyboard_2.add(button_about_planets)
    inline_keyboard.inline_keyboard = inline_keyboard_2.inline_keyboard + inline_keyboard.inline_keyboard

    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    response = f'üß≠ –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è —á–∏—Å–ª–∞ {ruling_number}:\n\n{suitable_occupations}'
    await bot.send_message(callback_query.message.chat.id, response, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'back', state=UserInput.waiting_for_dob)
async def cmd_back(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    dob_string = user_data.get('dob', None)

    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await send_dob_info_message(bot, callback_query.message.chat.id, datetime.strptime(dob_string, '%d.%m.%Y').date() if dob_string else None)

#–ß–∏—Å–ª–∞ –î–†üî¢
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('dr_numbers'), state=UserInput.waiting_for_dob)
async def cmd_dr_numbers(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    dob_string = user_data['dob']

    # –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∏—Å–µ–ª –≤ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ count_digit_occurrences
    count_dict = count_digit_occurrences(dob_string)

    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
    num_of_digits = len(set(count_dict.values()))

    # –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–æ–ª–±–µ—Ü –≤ —Ç–∞–±–ª–∏—Ü–µ SQLite
    if num_of_digits == 1:
        column_name = 'one_unit'
    elif num_of_digits == 2:
        column_name = 'two_units'
    elif num_of_digits == 3:
        column_name = 'three_units'
    elif num_of_digits == 4:
        column_name = 'four_units'
    else:
        column_name = 'five_units'

    # –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã SQLite
    cursor.execute(f'SELECT {column_name} FROM DR_numbers')
    data = cursor.fetchone()

    if data is None:
        response = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    else:
        response = data[0]  # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä—Ç–µ–∂–∞, —Ç–∞–∫ –∫–∞–∫ SELECT –≤–µ—Ä–Ω–µ—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∏—Å–ª–∞—Ö –≤ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
    await bot.send_message(callback_query.message.chat.id, response)



if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
